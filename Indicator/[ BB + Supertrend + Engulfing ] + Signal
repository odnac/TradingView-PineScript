// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © seung67461

//@version=5
indicator("[ BB + Supertrend + Engulfing ] + Signal", overlay = true)


/////////////////////////// BB ///////////////////////////

BB_source = close
BB_length = input.int(20, minval=1)
BB_mult = input.float(2.0, minval=0.001, maxval=50)    //표준편차
BB_mid_line = ta.sma(BB_source, BB_length)
BB_distance = BB_mult * ta.stdev(BB_source, BB_length)
BB_upper_line = BB_mid_line + BB_distance
BB_lower_line = BB_mid_line - BB_distance

BB_offset = input.int(0, "Offset", minval = -500, maxval = 500)
plot(BB_mid_line, "Basis", color=color.rgb(255, 165, 0, 85), offset = BB_offset)
plot(BB_upper_line, "Upper", color=color.rgb(255, 255, 255, 85), offset = BB_offset)
plot(BB_lower_line, "Lower", color=color.rgb(255, 255, 255, 85), offset = BB_offset)

// BB 시그널
BB_long_signal = ta.crossover(close, BB_lower_line)   // 볼린저 밴드 하단을 뚫고 올라갈 때 롱 시그널
plotshape(series = BB_long_signal, style = shape.arrowup, location = location.belowbar, color = color.rgb(255, 255, 255, 90), text = "BB_L", size = size.tiny, textcolor = color.rgb(255, 255, 255, 90))

BB_short_signal = ta.crossunder(close, BB_upper_line)   // 볼린저 밴드 상단을 뚫고 내려갈 때 숏 시그널
plotshape(series = BB_short_signal, style = shape.arrowdown, location = location.abovebar, color = color.rgb(255, 255, 255, 90), text = "BB_S", size = size.tiny, textcolor = color.rgb(255, 255, 255, 90))


/////////////////////////// Supertrend ///////////////////////////

[St_supertrend, St_direction] = ta.supertrend(3, 10)
plot(St_supertrend, color = color.rgb(33, 149, 243, 85), linewidth = 2, style = plot.style_steplinebr)

// St_direciton -1 롱, 1 숏
bgcolor(St_direction < 0 ? color.rgb(76, 175, 79, 95) : na)    // 롱 초록
bgcolor(St_direction > 0 ? color.rgb(255, 82, 82, 97) : na)    // 숏 빨강

// Supertrend 시그널
//초록 배경이 롱 시그널임
//무 배경이 숏 시그널임


/////////////////////////// Engulfing ///////////////////////////

//기본 설정
Eg_DownTrend = true
Eg_UpTrend = true
var Eg_trendRule1 = "SMA50"
var Eg_trendRule2 = "SMA50, SMA200"
var Eg_trendRule = input.string(Eg_trendRule1, "Detect Trend Based On", options=[Eg_trendRule1, Eg_trendRule2, "No detection"])

if Eg_trendRule == Eg_trendRule1
	priceAvg = ta.sma(close, 50)
	Eg_DownTrend := close < priceAvg
	Eg_UpTrend := close > priceAvg

if Eg_trendRule == Eg_trendRule2
	sma200 = ta.sma(close, 200)
	sma50 = ta.sma(close, 50)
	Eg_DownTrend := close < sma50 and sma50 < sma200
	Eg_UpTrend := close > sma50 and sma50 > sma200
Eg_Len = 14 // ta.ema depth for bodyAvg
Eg_ShadowPercent = 5.0 // size of shadows
Eg_ShadowEqualsPercent = 100.0
Eg_DojiBodyPercent = 5.0
Eg_Factor = 2.0 // shows the number of times the shadow dominates the candlestick body

Eg_BodyHi = math.max(close, open)
Eg_BodyLo = math.min(close, open)
Eg_Body = Eg_BodyHi - Eg_BodyLo
Eg_BodyAvg = ta.ema(Eg_Body, Eg_Len)
Eg_SmallBody = Eg_Body < Eg_BodyAvg
Eg_LongBody = Eg_Body > Eg_BodyAvg
Eg_UpShadow = high - Eg_BodyHi
Eg_DnShadow = Eg_BodyLo - low
Eg_HasUpShadow = Eg_UpShadow > Eg_ShadowPercent / 100 * Eg_Body
Eg_HasDnShadow = Eg_DnShadow > Eg_ShadowPercent / 100 * Eg_Body
Eg_WhiteBody = open < close
Eg_BlackBody = open > close
Eg_Range = high-low
Eg_IsInsideBar = Eg_BodyHi[1] > Eg_BodyHi and Eg_BodyLo[1] < Eg_BodyLo
Eg_BodyMiddle = Eg_Body / 2 + Eg_BodyLo
Eg_ShadowEquals = Eg_UpShadow == Eg_DnShadow or (math.abs(Eg_UpShadow - Eg_DnShadow) / Eg_DnShadow * 100) < Eg_ShadowEqualsPercent and (math.abs(Eg_DnShadow - Eg_UpShadow) / Eg_UpShadow * 100) < Eg_ShadowEqualsPercent
Eg_IsDojiBody = Eg_Range > 0 and Eg_Body <= Eg_Range * Eg_DojiBodyPercent / 100
Eg_Doji = Eg_IsDojiBody and Eg_ShadowEquals

patternLabelPosLow = low - (ta.atr(30) * 0.6)
patternLabelPosHigh = high + (ta.atr(30) * 0.6)

// Engulfing 시그널
Eg_EngulfingBullish = Eg_DownTrend and Eg_WhiteBody and Eg_LongBody and Eg_BlackBody[1] and Eg_SmallBody[1] and close >= open[1] and open <= close[1] and ( close > open[1] or open < close[1] )
plotshape(series = Eg_EngulfingBullish, style = shape.arrowup, location = location.belowbar, color = color.rgb(255, 255, 255, 90), text = "Eg_L", size = size.tiny, textcolor = color.rgb(255, 255, 255, 90))

Eg_EngulfingBearish = Eg_UpTrend and Eg_BlackBody and Eg_LongBody and Eg_WhiteBody[1] and Eg_SmallBody[1] and close <= open[1] and open >= close[1] and ( close < open[1] or open > close[1] )
plotshape(series = Eg_EngulfingBearish, style = shape.arrowdown, location = location.abovebar, color = color.rgb(255, 255, 255, 90), text = "Eg_S", size = size.tiny, textcolor = color.rgb(255, 255, 255, 90))

/////////////////////////// 추가할 지표 ///////////////////////////


/////////////////////////// 공통부분 long, short 찐 하얀색 ///////////////////////////

// long_signal = St_direction < 0 and ta.crossover(close, BB_lower_line) and Eg_EngulfingBullish  
// short_signal = St_direction > 0 and ta.crossunder(close, BB_upper_line) and Eg_EngulfingBearish

// long_signal = ta.crossover(close, BB_lower_line) and Eg_EngulfingBullish  
// short_signal = ta.crossunder(close, BB_upper_line) and Eg_EngulfingBearish

// plotshape(series = long_signal, style = shape.arrowup, location = location.belowbar, color = color.rgb(255, 255, 255), text = "L", textcolor = color.white, size = size.auto) // 롱 신호
// plotshape(series = short_signal, style = shape.arrowdown, location = location.abovebar, color = color.rgb(255, 255, 255), text = "S", textcolor = color.white, size = size.auto) // 숏 신호