//@version=5
indicator("EMA indicator", overlay=true)

// 입력 변수 설정
shortLength = input.int(5, title="Short EMA Length")
longLength = input.int(20, title="Long EMA Length")

// 이동 평균 계산
shortEMA = ta.ema(close, shortLength)
longEMA = ta.ema(close, longLength)

// 매수 및 매도 조건 설정
buySignal = ta.crossover(shortEMA, longEMA)   // 단기 EMA가 장기 EMA를 상향 돌파할 때 매수
sellSignal = ta.crossunder(shortEMA, longEMA) // 단기 EMA가 장기 EMA를 하향 돌파할 때 매도

// 차트에 신호 표시
// plot(shortEMA, color=color.green, title="Short EMA (5)")
// plot(longEMA, color=color.red, title="Long EMA (20)")

// 매수 및 매도 시그널 표시
plotshape(series=buySignal, location=location.belowbar, color=color.green, style=shape.labelup, title="Buy Signal", text="B")
plotshape(series=sellSignal, location=location.abovebar, color=color.red, style=shape.labeldown, title="Sell Signal", text="S")

// 백그라운드 색상 설정 (매수 시 초록색, 매도 시 빨간색)
// bgcolor(buySignal ? color.new(color.green, 90) : na, title="Buy Background")
// bgcolor(sellSignal ? color.new(color.red, 90) : na, title="Sell Background")


// SELF
self_20ema = request.security(syminfo.tickerid, timeframe.period, ta.ema(close, 20))
self_50ema = request.security(syminfo.tickerid, timeframe.period, ta.ema(close, 50))
self_100ema = request.security(syminfo.tickerid, timeframe.period, ta.ema(close, 100))
self_200ema = request.security(syminfo.tickerid, timeframe.period, ta.ema(close, 200))

// plot(self_20ema, color = color.red)
plot(self_50ema, color = color.orange)
plot(self_100ema, color = color.rgb(0, 255, 98))
plot(self_200ema, color = color.blue)

self_long_trend = self_50ema > self_100ema and self_100ema > self_200ema // self_20ema > self_50ema and 
self_short_trend = self_50ema < self_100ema and self_100ema < self_200ema // self_20ema < self_50ema and 

bgcolor((self_long_trend) ? color.rgb(76, 175, 80, 95) : na)
bgcolor((self_long_trend) ? color.rgb(255, 255, 255, 95) : na)
bgcolor((self_short_trend) ? color.rgb(255, 0, 0, 95) : na)
bgcolor((self_short_trend) ? color.rgb(255, 255, 255, 95) : na)
