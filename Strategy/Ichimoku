//@version=5
//@strategy_alert_message {{strategy.order.alert_message}}
// ************************************** POA ************************************** //
import dokang/POA/12 as POA

start_time = input.time(timestamp("2024-01-01T00:00:00+09:00"), title="start")
end_time = input.time(timestamp("2100-08-31T01:07:00+09:00"), title="end")

pstrategy = POA.bot.new("", start_time, end_time, exit_percent = 100, close_percent = 100)
pstrategy.start_trade()
// ********************************************************************************* //

strategy("Ichimoku",
 overlay = true,
 process_orders_on_close = true,
 initial_capital = 2200,
 default_qty_type = strategy.percent_of_equity,
 default_qty_value = 100)

conversionPeriods = input.int(9, minval=1, title="Conversion Line Length")
basePeriods = input.int(26, minval=1, title="Base Line Length")
laggingSpan2Periods = input.int(52, minval=1, title="Leading Span B Length")
displacement = input.int(26, minval=1, title="Lagging Span")
donchian(len) => math.avg(ta.lowest(len), ta.highest(len))
conversionLine = donchian(conversionPeriods)
baseLine = donchian(basePeriods)
leadLine1 = math.avg(conversionLine, baseLine)
leadLine2 = donchian(laggingSpan2Periods)
plot(conversionLine, color=#2962FF, title="Conversion Line")
plot(baseLine, color=#B71C1C, title="Base Line")
plot(close, offset = -displacement + 1, color=color.white, title="Lagging Span")
leadLine1_offset  = plot(leadLine1, offset = displacement - 1, color=#A5D6A7,
     title="Leading Span A")
leadLine2_offset  = plot(leadLine2, offset = displacement - 1, color=#EF9A9A,
     title="Leading Span B")
plot(leadLine1 > leadLine2 ? leadLine1 : leadLine2, offset = displacement - 1, title = "Kumo Cloud Upper Line", display = display.none) 
plot(leadLine1 < leadLine2 ? leadLine1 : leadLine2, offset = displacement - 1, title = "Kumo Cloud Lower Line", display = display.none) 
fill(leadLine1_offset, leadLine2_offset, color = leadLine1 > leadLine2 ? color.rgb(67, 160, 71, 90) : color.rgb(244, 67, 54, 90))

// dmi
lensig = input.int(14, title="ADX Smoothing", minval=1, maxval=50)
len = input.int(14, minval=1, title="DI Length")
up = ta.change(high)
down = -ta.change(low)
plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
trur = ta.rma(ta.tr, len)
plus = fixnan(100 * ta.rma(plusDM, len) / trur)
minus = fixnan(100 * ta.rma(minusDM, len) / trur)
sum = plus + minus
adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), lensig)

// trading
dmi_long = plus > minus and plus > plus[1] and minus < minus[1] 
base_long = leadLine1[displacement - 1] > leadLine2[displacement - 1] and close > leadLine1[displacement - 1]
is_long = dmi_long and (ta.crossover(close, leadLine1[displacement - 1]) or close > leadLine1[displacement - 1])

is_long_close = ta.crossunder(close, leadLine1[displacement - 1])

long_sl = input(2, "long stoploss (%))")
is_long_exit = strategy.position_avg_price * ( ( 100 - long_sl ) / 100 )

if is_long
    pstrategy.entry("Ichimoku", "strategy.long")
    
if is_long_close
    pstrategy.close("Ichimoku")

pstrategy.exit("exit Ichimoku", "Ichimoku", stop = is_long_exit)