//@version=5
//@strategy_alert_message {{strategy.order.alert_message}}
import dokang/POA/9 as POA
password = ""

// 시작시간, 종료시간 설정
start_time = input.time(timestamp("2023-07-02T13:43:00+09:00"), title="자동매매 시작")          // 기간 확인해!         앨러트에서 기간 늘려!
end_time = input.time(timestamp("2050-07-02T13:42:00+09:00"), title="자동매매 종료")            // 기간 확인해!

in_trade = POA.in_trade(start_time, end_time)
bgcolor(in_trade ? color.rgb(83, 107, 173, 94) : na)


// 전략스크립트
strategy("[비트겟 BTCUSDT.P] 일목구름 I",
 overlay = true,
 process_orders_on_close = true,
 initial_capital = 3000,                                                                        //// 초기 자금 자동으로 레버리지 곱해서 들어감 
 default_qty_type = strategy.cash,                                                              //// 고정 금액으로 들어가기
 default_qty_value = 1200)                                                                      //// 레버리지를 곱한 금액을 써야함 500이면 2000써야함

// 전략 알고리즘 작성
conversionPeriods = input.int(9, minval=1, title="Conversion Line Length")
basePeriods = input.int(26, minval=1, title="Base Line Length")
laggingSpan2Periods = input.int(52, minval=1, title="Leading Span B Length")
displacement = input.int(26, minval=1, title="Lagging Span")
donchian(len) => math.avg(ta.lowest(len), ta.highest(len))
conversionLine = donchian(conversionPeriods)
baseLine = donchian(basePeriods)
leadLine1 = math.avg(conversionLine, baseLine)
leadLine2 = donchian(laggingSpan2Periods)
plot(conversionLine, color=#2962FF, title="Conversion Line")
plot(baseLine, color=#B71C1C, title="Base Line")
plot(close, offset = -displacement + 1, color=#43A047, title="Lagging Span")
p1 = plot(leadLine1, offset = displacement - 1, color=#A5D6A7,
	 title="Leading Span A")
p2 = plot(leadLine2, offset = displacement - 1, color=#EF9A9A,
	 title="Leading Span B")
plot(leadLine1 > leadLine2 ? leadLine1 : leadLine2, offset = displacement - 1, title = "Kumo Cloud Upper Line", display = display.none) 
plot(leadLine1 < leadLine2 ? leadLine1 : leadLine2, offset = displacement - 1, title = "Kumo Cloud Lower Line", display = display.none) 
fill(p1, p2, color = leadLine1 > leadLine2 ? color.rgb(67, 160, 71, 90) : color.rgb(244, 67, 54, 90))

is_long = ta.crossover(close, leadLine2)
is_long_close = ta.crossunder(conversionLine, baseLine)
long_sl = input(2, "롱 손절 (%))")
is_long_exit = strategy.position_avg_price * ( ( 100 - long_sl ) / 100 )

is_short = ta.crossunder(close, leadLine2)
is_short_close = ta.crossover(conversionLine, baseLine)
short_sl = input(2, "숏 손절 (%))")
is_short_exit = strategy.position_avg_price * ( ( 100 - short_sl ) / 100 )

// if in_trade 안에서 진입/종료 작성
if in_trade
    if is_long
        strategy.entry("[비트겟 BTCUSDT.P] 일목구름 long", strategy.long, alert_message = POA.entry_message(password))
    if is_long_exit
        strategy.exit("exit", "[비트겟 BTCUSDT.P] 일목구름 long", stop = is_long_exit, alert_message = POA.exit_message(password))
    if is_long_close
        strategy.close("[비트겟 BTCUSDT.P] 일목구름 long", alert_message = POA.close_message(password))

    if is_short
        strategy.entry("[비트겟 BTCUSDT.P] 일목구름 short", strategy.short, alert_message = POA.entry_message(password))
    if is_short_exit
        strategy.exit("exit", "[비트겟 BTCUSDT.P] 일목구름 short", stop = is_short_exit, alert_message = POA.exit_message(password))
    if is_short_close
        strategy.close("[비트겟 BTCUSDT.P] 일목구름 short", alert_message = POA.close_message(password))