//@version=5
//@strategy_alert_message {{strategy.order.alert_message}}
// ************************************** POA ************************************** //
import dokang/POA/9 as POA

// 시작시간, 종료시간 설정
start_time = input.time(timestamp("2023-07-02T00:00:00+09:00"), title="자동매매 시작")                              // 시간 바꿔            앨러트 바꿔
end_time = input.time(timestamp("2050-07-02T13:04:00+09:00"), title="자동매매 종료")                                // 시간 바꿔

// 포아봇 설정
pstrategy = POA.bot.new("", start_time, end_time, leverage = 4)                                          // 비밀번호 레버리지 바꿔
pstrategy.start_trade()
// ********************************************************************************* //

strategy("[바낸 BTCUSDT.P] MACD C", 
 overlay = true,
 process_orders_on_close = true,
 initial_capital = 800,                                                                        //// 초기 자금 자동으로 레버리지 곱해서 들어감             앨러트에서 기간 늘려!
 default_qty_type = strategy.percent_of_equity,                                                             
 default_qty_value = 100)    

//////////////////////////////////////////// macd ////////////////////////////////////////////

fast_length = input(title="Fast Length", defval=12)
slow_length = input(title="Slow Length", defval=26)
src = input(title="Source", defval=close)
signal_length = input.int(title="Signal Smoothing",  minval = 1, maxval = 50, defval = 9)
sma_source = input.string(title="Oscillator MA Type",  defval="EMA", options=["SMA", "EMA"])
sma_signal = input.string(title="Signal Line MA Type", defval="EMA", options=["SMA", "EMA"])
// Plot colors
col_macd = input(#2962FF, "MACD Line  ", group="Color Settings", inline="MACD")
col_signal = input(#FF6D00, "Signal Line  ", group="Color Settings", inline="Signal")
col_grow_above = input(#26A69A, "Above   Grow", group="Histogram", inline="Above")
col_fall_above = input(#B2DFDB, "Fall", group="Histogram", inline="Above")
col_grow_below = input(#FFCDD2, "Below Grow", group="Histogram", inline="Below")
col_fall_below = input(#FF5252, "Fall", group="Histogram", inline="Below")
// Calculating
fast_ma = sma_source == "SMA" ? ta.sma(src, fast_length) : ta.ema(src, fast_length)
slow_ma = sma_source == "SMA" ? ta.sma(src, slow_length) : ta.ema(src, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal == "SMA" ? ta.sma(macd, signal_length) : ta.ema(macd, signal_length)
hist = macd - signal
is_long = ta.crossover(fast_ma, slow_ma) and macd > 0
is_long_close = ta.crossunder(fast_ma, slow_ma) and macd < 0
long_sl = input(2, "손절 (%))")
is_long_exit = strategy.position_avg_price * ( ( 100 - long_sl ) / 100 )

if is_long
    pstrategy.entry("[바낸 BTCUSDT.P] MACD", "strategy.long")

if is_long_exit
    pstrategy.exit("exit", "[바낸 BTCUSDT.P] MACD", stop = is_long_exit)

if is_long_close
    pstrategy.close("[바낸 BTCUSDT.P] MACD")
