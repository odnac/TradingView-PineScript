//@version=5
//@strategy_alert_message {{strategy.order.alert_message}}
// ************************************** POA ************************************** //
import dokang/POA/9 as POA

// 시작시간, 종료시간 설정
start_time = input.time(timestamp("2023-07-02T00:00:00+09:00"), title="자동매매 시작")                     // 시간 바꿔        앨러트 바꿔
end_time = input.time(timestamp("2050-07-02T12:56:00+09:00"), title="자동매매 종료")                        // 시간 바꿔

// 포아봇 설정
pstrategy = POA.bot.new("", start_time, end_time, leverage = 4)                                  // 비밀번호 레버리지 확인해 
pstrategy.start_trade()
// ********************************************************************************* //

strategy("[바낸 BTCUSDT.P] 일목구름 C",
 overlay = true,
 process_orders_on_close = true,
 initial_capital = 300,                                                                        //// 초기 자금 자동으로 레버리지 곱해서 들어감             앨러트에서 기간 늘려!
 default_qty_type = strategy.percent_of_equity,                                                             
 default_qty_value = 100)         

///////////////////////////////////////////// 전략 /////////////////////////////////////////////
conversionPeriods = input.int(9, minval=1, title="Conversion Line Length")
basePeriods = input.int(26, minval=1, title="Base Line Length")
laggingSpan2Periods = input.int(52, minval=1, title="Leading Span B Length")
displacement = input.int(26, minval=1, title="Lagging Span")
donchian(len) => math.avg(ta.lowest(len), ta.highest(len))
conversionLine = donchian(conversionPeriods)
baseLine = donchian(basePeriods)
leadLine1 = math.avg(conversionLine, baseLine)
leadLine2 = donchian(laggingSpan2Periods)
plot(conversionLine, color=#2962FF, title="Conversion Line")
plot(baseLine, color=#B71C1C, title="Base Line")
plot(close, offset = -displacement + 1, color=#43A047, title="Lagging Span")
p1 = plot(leadLine1, offset = displacement - 1, color=#A5D6A7,
     title="Leading Span A")
p2 = plot(leadLine2, offset = displacement - 1, color=#EF9A9A,
     title="Leading Span B")
plot(leadLine1 > leadLine2 ? leadLine1 : leadLine2, offset = displacement - 1, title = "Kumo Cloud Upper Line", display = display.none) 
plot(leadLine1 < leadLine2 ? leadLine1 : leadLine2, offset = displacement - 1, title = "Kumo Cloud Lower Line", display = display.none) 
fill(p1, p2, color = leadLine1 > leadLine2 ? color.rgb(67, 160, 71, 90) : color.rgb(244, 67, 54, 90))

///////////////////////////////////////////// 진입 /////////////////////////////////////////////
is_long = ta.crossover(close, leadLine2)
is_long_close = ta.crossunder(conversionLine, baseLine)
long_sl = input(2, "롱 손절 (%))")
is_long_exit = strategy.position_avg_price * ( ( 100 - long_sl ) / 100 )

if is_long
    pstrategy.entry("[바낸 BTCUSDT.P] 일목구름", "strategy.long")

if is_long_close
    pstrategy.close("[바낸 BTCUSDT.P] 일목구름")
    
if is_long_exit
    pstrategy.exit("exit", "[바낸 BTCUSDT.P] 일목구름", stop = is_long_exit)
